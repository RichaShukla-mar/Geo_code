/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.facility.smds.operations.MSK;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** Facility TransportModes */
@org.apache.avro.specific.AvroGenerated
public class transportModes extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7935963615082695911L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"transportModes\",\"namespace\":\"com.maersk.facility.smds.operations.MSK\",\"doc\":\"Facility TransportModes\",\"fields\":[{\"name\":\"transportMode\",\"type\":[\"null\",\"string\"]},{\"name\":\"transportCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"transportDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"validThroughDate\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<transportModes> ENCODER =
      new BinaryMessageEncoder<transportModes>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<transportModes> DECODER =
      new BinaryMessageDecoder<transportModes>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<transportModes> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<transportModes> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<transportModes>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this transportModes to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a transportModes from a ByteBuffer. */
  public static transportModes fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence transportMode;
  @Deprecated public java.lang.CharSequence transportCode;
  @Deprecated public java.lang.CharSequence transportDescription;
  @Deprecated public java.lang.Long validThroughDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public transportModes() {}

  /**
   * All-args constructor.
   * @param transportMode The new value for transportMode
   * @param transportCode The new value for transportCode
   * @param transportDescription The new value for transportDescription
   * @param validThroughDate The new value for validThroughDate
   */
  public transportModes(java.lang.CharSequence transportMode, java.lang.CharSequence transportCode, java.lang.CharSequence transportDescription, java.lang.Long validThroughDate) {
    this.transportMode = transportMode;
    this.transportCode = transportCode;
    this.transportDescription = transportDescription;
    this.validThroughDate = validThroughDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transportMode;
    case 1: return transportCode;
    case 2: return transportDescription;
    case 3: return validThroughDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transportMode = (java.lang.CharSequence)value$; break;
    case 1: transportCode = (java.lang.CharSequence)value$; break;
    case 2: transportDescription = (java.lang.CharSequence)value$; break;
    case 3: validThroughDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transportMode' field.
   * @return The value of the 'transportMode' field.
   */
  public java.lang.CharSequence getTransportMode() {
    return transportMode;
  }

  /**
   * Sets the value of the 'transportMode' field.
   * @param value the value to set.
   */
  public void setTransportMode(java.lang.CharSequence value) {
    this.transportMode = value;
  }

  /**
   * Gets the value of the 'transportCode' field.
   * @return The value of the 'transportCode' field.
   */
  public java.lang.CharSequence getTransportCode() {
    return transportCode;
  }

  /**
   * Sets the value of the 'transportCode' field.
   * @param value the value to set.
   */
  public void setTransportCode(java.lang.CharSequence value) {
    this.transportCode = value;
  }

  /**
   * Gets the value of the 'transportDescription' field.
   * @return The value of the 'transportDescription' field.
   */
  public java.lang.CharSequence getTransportDescription() {
    return transportDescription;
  }

  /**
   * Sets the value of the 'transportDescription' field.
   * @param value the value to set.
   */
  public void setTransportDescription(java.lang.CharSequence value) {
    this.transportDescription = value;
  }

  /**
   * Gets the value of the 'validThroughDate' field.
   * @return The value of the 'validThroughDate' field.
   */
  public java.lang.Long getValidThroughDate() {
    return validThroughDate;
  }

  /**
   * Sets the value of the 'validThroughDate' field.
   * @param value the value to set.
   */
  public void setValidThroughDate(java.lang.Long value) {
    this.validThroughDate = value;
  }

  /**
   * Creates a new transportModes RecordBuilder.
   * @return A new transportModes RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.transportModes.Builder newBuilder() {
    return new com.maersk.facility.smds.operations.MSK.transportModes.Builder();
  }

  /**
   * Creates a new transportModes RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new transportModes RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.transportModes.Builder newBuilder(com.maersk.facility.smds.operations.MSK.transportModes.Builder other) {
    return new com.maersk.facility.smds.operations.MSK.transportModes.Builder(other);
  }

  /**
   * Creates a new transportModes RecordBuilder by copying an existing transportModes instance.
   * @param other The existing instance to copy.
   * @return A new transportModes RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.transportModes.Builder newBuilder(com.maersk.facility.smds.operations.MSK.transportModes other) {
    return new com.maersk.facility.smds.operations.MSK.transportModes.Builder(other);
  }

  /**
   * RecordBuilder for transportModes instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<transportModes>
    implements org.apache.avro.data.RecordBuilder<transportModes> {

    private java.lang.CharSequence transportMode;
    private java.lang.CharSequence transportCode;
    private java.lang.CharSequence transportDescription;
    private java.lang.Long validThroughDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.facility.smds.operations.MSK.transportModes.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transportMode)) {
        this.transportMode = data().deepCopy(fields()[0].schema(), other.transportMode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transportCode)) {
        this.transportCode = data().deepCopy(fields()[1].schema(), other.transportCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transportDescription)) {
        this.transportDescription = data().deepCopy(fields()[2].schema(), other.transportDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing transportModes instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.facility.smds.operations.MSK.transportModes other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transportMode)) {
        this.transportMode = data().deepCopy(fields()[0].schema(), other.transportMode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.transportCode)) {
        this.transportCode = data().deepCopy(fields()[1].schema(), other.transportCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.transportDescription)) {
        this.transportDescription = data().deepCopy(fields()[2].schema(), other.transportDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'transportMode' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransportMode() {
      return transportMode;
    }

    /**
      * Sets the value of the 'transportMode' field.
      * @param value The value of 'transportMode'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder setTransportMode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.transportMode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transportMode' field has been set.
      * @return True if the 'transportMode' field has been set, false otherwise.
      */
    public boolean hasTransportMode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transportMode' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder clearTransportMode() {
      transportMode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransportCode() {
      return transportCode;
    }

    /**
      * Sets the value of the 'transportCode' field.
      * @param value The value of 'transportCode'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder setTransportCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.transportCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'transportCode' field has been set.
      * @return True if the 'transportCode' field has been set, false otherwise.
      */
    public boolean hasTransportCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'transportCode' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder clearTransportCode() {
      transportCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'transportDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransportDescription() {
      return transportDescription;
    }

    /**
      * Sets the value of the 'transportDescription' field.
      * @param value The value of 'transportDescription'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder setTransportDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.transportDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'transportDescription' field has been set.
      * @return True if the 'transportDescription' field has been set, false otherwise.
      */
    public boolean hasTransportDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'transportDescription' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder clearTransportDescription() {
      transportDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validThroughDate' field.
      * @return The value.
      */
    public java.lang.Long getValidThroughDate() {
      return validThroughDate;
    }

    /**
      * Sets the value of the 'validThroughDate' field.
      * @param value The value of 'validThroughDate'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder setValidThroughDate(java.lang.Long value) {
      validate(fields()[3], value);
      this.validThroughDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validThroughDate' field has been set.
      * @return True if the 'validThroughDate' field has been set, false otherwise.
      */
    public boolean hasValidThroughDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validThroughDate' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.transportModes.Builder clearValidThroughDate() {
      validThroughDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public transportModes build() {
      try {
        transportModes record = new transportModes();
        record.transportMode = fieldSetFlags()[0] ? this.transportMode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.transportCode = fieldSetFlags()[1] ? this.transportCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.transportDescription = fieldSetFlags()[2] ? this.transportDescription : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.validThroughDate = fieldSetFlags()[3] ? this.validThroughDate : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<transportModes>
    WRITER$ = (org.apache.avro.io.DatumWriter<transportModes>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<transportModes>
    READER$ = (org.apache.avro.io.DatumReader<transportModes>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

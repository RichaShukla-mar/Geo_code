/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.maersk.facility.smds.operations.MSK;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** FacilityServices Details */
@org.apache.avro.specific.AvroGenerated
public class facilityServices extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2912647417117047747L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"facilityServices\",\"namespace\":\"com.maersk.facility.smds.operations.MSK\",\"doc\":\"FacilityServices Details\",\"fields\":[{\"name\":\"serviceName\",\"type\":[\"null\",\"string\"]},{\"name\":\"serviceCode\",\"type\":[\"null\",\"string\"]},{\"name\":\"serviceDescription\",\"type\":[\"null\",\"string\"]},{\"name\":\"validThroughDate\",\"type\":[\"null\",\"long\"],\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<facilityServices> ENCODER =
      new BinaryMessageEncoder<facilityServices>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<facilityServices> DECODER =
      new BinaryMessageDecoder<facilityServices>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<facilityServices> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<facilityServices> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<facilityServices>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this facilityServices to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a facilityServices from a ByteBuffer. */
  public static facilityServices fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence serviceName;
  @Deprecated public java.lang.CharSequence serviceCode;
  @Deprecated public java.lang.CharSequence serviceDescription;
  @Deprecated public java.lang.Long validThroughDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public facilityServices() {}

  /**
   * All-args constructor.
   * @param serviceName The new value for serviceName
   * @param serviceCode The new value for serviceCode
   * @param serviceDescription The new value for serviceDescription
   * @param validThroughDate The new value for validThroughDate
   */
  public facilityServices(java.lang.CharSequence serviceName, java.lang.CharSequence serviceCode, java.lang.CharSequence serviceDescription, java.lang.Long validThroughDate) {
    this.serviceName = serviceName;
    this.serviceCode = serviceCode;
    this.serviceDescription = serviceDescription;
    this.validThroughDate = validThroughDate;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return serviceName;
    case 1: return serviceCode;
    case 2: return serviceDescription;
    case 3: return validThroughDate;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: serviceName = (java.lang.CharSequence)value$; break;
    case 1: serviceCode = (java.lang.CharSequence)value$; break;
    case 2: serviceDescription = (java.lang.CharSequence)value$; break;
    case 3: validThroughDate = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'serviceName' field.
   * @return The value of the 'serviceName' field.
   */
  public java.lang.CharSequence getServiceName() {
    return serviceName;
  }

  /**
   * Sets the value of the 'serviceName' field.
   * @param value the value to set.
   */
  public void setServiceName(java.lang.CharSequence value) {
    this.serviceName = value;
  }

  /**
   * Gets the value of the 'serviceCode' field.
   * @return The value of the 'serviceCode' field.
   */
  public java.lang.CharSequence getServiceCode() {
    return serviceCode;
  }

  /**
   * Sets the value of the 'serviceCode' field.
   * @param value the value to set.
   */
  public void setServiceCode(java.lang.CharSequence value) {
    this.serviceCode = value;
  }

  /**
   * Gets the value of the 'serviceDescription' field.
   * @return The value of the 'serviceDescription' field.
   */
  public java.lang.CharSequence getServiceDescription() {
    return serviceDescription;
  }

  /**
   * Sets the value of the 'serviceDescription' field.
   * @param value the value to set.
   */
  public void setServiceDescription(java.lang.CharSequence value) {
    this.serviceDescription = value;
  }

  /**
   * Gets the value of the 'validThroughDate' field.
   * @return The value of the 'validThroughDate' field.
   */
  public java.lang.Long getValidThroughDate() {
    return validThroughDate;
  }

  /**
   * Sets the value of the 'validThroughDate' field.
   * @param value the value to set.
   */
  public void setValidThroughDate(java.lang.Long value) {
    this.validThroughDate = value;
  }

  /**
   * Creates a new facilityServices RecordBuilder.
   * @return A new facilityServices RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.facilityServices.Builder newBuilder() {
    return new com.maersk.facility.smds.operations.MSK.facilityServices.Builder();
  }

  /**
   * Creates a new facilityServices RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new facilityServices RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.facilityServices.Builder newBuilder(com.maersk.facility.smds.operations.MSK.facilityServices.Builder other) {
    return new com.maersk.facility.smds.operations.MSK.facilityServices.Builder(other);
  }

  /**
   * Creates a new facilityServices RecordBuilder by copying an existing facilityServices instance.
   * @param other The existing instance to copy.
   * @return A new facilityServices RecordBuilder
   */
  public static com.maersk.facility.smds.operations.MSK.facilityServices.Builder newBuilder(com.maersk.facility.smds.operations.MSK.facilityServices other) {
    return new com.maersk.facility.smds.operations.MSK.facilityServices.Builder(other);
  }

  /**
   * RecordBuilder for facilityServices instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<facilityServices>
    implements org.apache.avro.data.RecordBuilder<facilityServices> {

    private java.lang.CharSequence serviceName;
    private java.lang.CharSequence serviceCode;
    private java.lang.CharSequence serviceDescription;
    private java.lang.Long validThroughDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.maersk.facility.smds.operations.MSK.facilityServices.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[0].schema(), other.serviceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceCode)) {
        this.serviceCode = data().deepCopy(fields()[1].schema(), other.serviceCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serviceDescription)) {
        this.serviceDescription = data().deepCopy(fields()[2].schema(), other.serviceDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing facilityServices instance
     * @param other The existing instance to copy.
     */
    private Builder(com.maersk.facility.smds.operations.MSK.facilityServices other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[0].schema(), other.serviceName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceCode)) {
        this.serviceCode = data().deepCopy(fields()[1].schema(), other.serviceCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.serviceDescription)) {
        this.serviceDescription = data().deepCopy(fields()[2].schema(), other.serviceDescription);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.validThroughDate)) {
        this.validThroughDate = data().deepCopy(fields()[3].schema(), other.validThroughDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'serviceName' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceName() {
      return serviceName;
    }

    /**
      * Sets the value of the 'serviceName' field.
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder setServiceName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.serviceName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceCode() {
      return serviceCode;
    }

    /**
      * Sets the value of the 'serviceCode' field.
      * @param value The value of 'serviceCode'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder setServiceCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.serviceCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceCode' field has been set.
      * @return True if the 'serviceCode' field has been set, false otherwise.
      */
    public boolean hasServiceCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceCode' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder clearServiceCode() {
      serviceCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceDescription() {
      return serviceDescription;
    }

    /**
      * Sets the value of the 'serviceDescription' field.
      * @param value The value of 'serviceDescription'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder setServiceDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.serviceDescription = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceDescription' field has been set.
      * @return True if the 'serviceDescription' field has been set, false otherwise.
      */
    public boolean hasServiceDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'serviceDescription' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder clearServiceDescription() {
      serviceDescription = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'validThroughDate' field.
      * @return The value.
      */
    public java.lang.Long getValidThroughDate() {
      return validThroughDate;
    }

    /**
      * Sets the value of the 'validThroughDate' field.
      * @param value The value of 'validThroughDate'.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder setValidThroughDate(java.lang.Long value) {
      validate(fields()[3], value);
      this.validThroughDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'validThroughDate' field has been set.
      * @return True if the 'validThroughDate' field has been set, false otherwise.
      */
    public boolean hasValidThroughDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'validThroughDate' field.
      * @return This builder.
      */
    public com.maersk.facility.smds.operations.MSK.facilityServices.Builder clearValidThroughDate() {
      validThroughDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public facilityServices build() {
      try {
        facilityServices record = new facilityServices();
        record.serviceName = fieldSetFlags()[0] ? this.serviceName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.serviceCode = fieldSetFlags()[1] ? this.serviceCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.serviceDescription = fieldSetFlags()[2] ? this.serviceDescription : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.validThroughDate = fieldSetFlags()[3] ? this.validThroughDate : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<facilityServices>
    WRITER$ = (org.apache.avro.io.DatumWriter<facilityServices>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<facilityServices>
    READER$ = (org.apache.avro.io.DatumReader<facilityServices>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
